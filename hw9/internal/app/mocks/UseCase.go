// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	file "homework/internal/domain/file"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase struct {
	mock.Mock
}

// GetFileData provides a mock function with given fields: name
func (_m *UseCase) GetFileData(name string) (io.ReadCloser, error) {
	ret := _m.Called(name)

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (io.ReadCloser, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileInfo provides a mock function with given fields: name
func (_m *UseCase) GetFileInfo(name string) (file.Info, error) {
	ret := _m.Called(name)

	var r0 file.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (file.Info, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) file.Info); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(file.Info)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFileList provides a mock function with given fields:
func (_m *UseCase) GetFileList() ([]file.Info, error) {
	ret := _m.Called()

	var r0 []file.Info
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]file.Info, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []file.Info); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]file.Info)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase {
	mock := &UseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
