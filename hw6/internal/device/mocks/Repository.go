// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	model "homework/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: d
func (_m *Repository) Create(d model.Device) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Device) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - d model.Device
func (_e *Repository_Expecter) Create(d interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", d)}
}

func (_c *Repository_Create_Call) Run(run func(d model.Device)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Device))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 error) *Repository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(model.Device) error) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: num
func (_m *Repository) Delete(num string) error {
	ret := _m.Called(num)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(num)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - num string
func (_e *Repository_Expecter) Delete(num interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", num)}
}

func (_c *Repository_Delete_Call) Run(run func(num string)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Delete_Call) RunAndReturn(run func(string) error) *Repository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: num
func (_m *Repository) Get(num string) (model.Device, error) {
	ret := _m.Called(num)

	var r0 model.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Device, error)); ok {
		return rf(num)
	}
	if rf, ok := ret.Get(0).(func(string) model.Device); ok {
		r0 = rf(num)
	} else {
		r0 = ret.Get(0).(model.Device)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - num string
func (_e *Repository_Expecter) Get(num interface{}) *Repository_Get_Call {
	return &Repository_Get_Call{Call: _e.mock.On("Get", num)}
}

func (_c *Repository_Get_Call) Run(run func(num string)) *Repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_Get_Call) Return(_a0 model.Device, _a1 error) *Repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_Get_Call) RunAndReturn(run func(string) (model.Device, error)) *Repository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: d
func (_m *Repository) Update(d model.Device) error {
	ret := _m.Called(d)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Device) error); ok {
		r0 = rf(d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Repository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - d model.Device
func (_e *Repository_Expecter) Update(d interface{}) *Repository_Update_Call {
	return &Repository_Update_Call{Call: _e.mock.On("Update", d)}
}

func (_c *Repository_Update_Call) Run(run func(d model.Device)) *Repository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.Device))
	})
	return _c
}

func (_c *Repository_Update_Call) Return(_a0 error) *Repository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Update_Call) RunAndReturn(run func(model.Device) error) *Repository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
